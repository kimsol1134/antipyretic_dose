import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { loadEnvConfig } from '@next/env';
import { productsSchema } from '../src/lib/schemas.js';
import { fetchEasyDrugList, filterSimilarItems, type EasyDrugItem } from '../src/lib/easy-drug.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables from .env files
const projectDir = path.join(__dirname, '..');
loadEnvConfig(projectDir);

type SimilarProductsData = Record<string, EasyDrugItem[]>;

async function main() {
  console.log('üöÄ Ïú†ÏÇ¨ ÏïΩÌíà Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë...\n');

  // 1. products.json ÏùΩÍ∏∞
  const productsPath = path.join(__dirname, '../data/products.json');
  const productsJson = await fs.readFile(productsPath, 'utf-8');
  const products = productsSchema.parse(JSON.parse(productsJson));

  console.log(`‚úÖ ${products.length}Í∞úÏùò Ï†úÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å\n`);

  // 2. Í∞Å Ï†úÌíàÏóê ÎåÄÌï¥ Ïú†ÏÇ¨ ÏïΩÌíà Ï°∞Ìöå
  const similarProductsData: SimilarProductsData = {};

  for (const product of products) {
    console.log(`üìã [${product.name}] Ïú†ÏÇ¨ ÏïΩÌíà Í≤ÄÏÉâ Ï§ë...`);
    console.log(`   ÏÑ±Î∂Ñ: ${product.ingredient}`);
    console.log(`   ÎÜçÎèÑ: ${product.strength_mg_per_ml} mg/mL`);

    try {
      // API Ìò∏Ï∂ú
      const apiResponse = await fetchEasyDrugList({
        ingredient: product.ingredient,
        pageSize: 100,
      });

      console.log(`   API ÏùëÎãµ: ${apiResponse.items.length}Í∞ú Ìï≠Î™©`);

      // ÌïÑÌÑ∞ÎßÅ (Ïñ¥Î¶∞Ïù¥Ïö© ÏïΩÌíàÎßå, Í∞ôÏùÄ ÎÜçÎèÑ)
      const filtered = filterSimilarItems(apiResponse.items, {
        ingredient: product.ingredient,
        strengthMgPerMl: product.strength_mg_per_ml,
        tolerance: 0.5,  // Î∞òÏò¨Î¶º Ïò§Ï∞® ÌóàÏö©
        childrenOnly: true,  // Ïñ¥Î¶∞Ïù¥Ïö© ÏïΩÌíàÎßå
      });

      console.log(`   ÌïÑÌÑ∞ÎßÅ ÏÉÅÏÑ∏:`);
      console.log(`     - Ïñ¥Î¶∞Ïù¥Ïö© ÌïÑÌÑ∞ Ï†ÅÏö©`);
      console.log(`     - ÎÜçÎèÑ ÌïÑÌÑ∞: ${product.strength_mg_per_ml} ¬± 0.5 mg/mL`);

      console.log(`   ÌïÑÌÑ∞ÎßÅ ÌõÑ: ${filtered.length}Í∞ú Ìï≠Î™©`);

      // ÏÉÅÏúÑ 5Í∞úÎßå Ï†ÄÏû•
      similarProductsData[product.id] = filtered.slice(0, 5);

      console.log(`   ‚úÖ ÏôÑÎ£å: ${similarProductsData[product.id].length}Í∞ú Ìï≠Î™© Ï†ÄÏû•\n`);

      // API rate limit Î∞©ÏßÄÎ•º ÏúÑÌïú ÎåÄÍ∏∞
      await new Promise((resolve) => setTimeout(resolve, 1000));
    } catch (error) {
      console.error(`   ‚ùå Ïò§Î•ò: ${error instanceof Error ? error.message : String(error)}\n`);
      similarProductsData[product.id] = [];
    }
  }

  // 3. Í≤∞Í≥ºÎ•º JSON ÌååÏùºÎ°ú Ï†ÄÏû•
  const outputPath = path.join(__dirname, '../data/similar-products.json');
  await fs.writeFile(
    outputPath,
    JSON.stringify(similarProductsData, null, 2),
    'utf-8'
  );

  console.log('‚úÖ Ïú†ÏÇ¨ ÏïΩÌíà Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å!');
  console.log(`üìÅ Ï†ÄÏû• ÏúÑÏπò: ${outputPath}`);
  console.log('\nüìä ÏàòÏßë Í≤∞Í≥º:');
  for (const [productId, items] of Object.entries(similarProductsData)) {
    console.log(`   ${productId}: ${items.length}Í∞ú Ìï≠Î™©`);
  }
}

main().catch((error) => {
  console.error('‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Ïã§Ìå®:', error);
  process.exit(1);
});
